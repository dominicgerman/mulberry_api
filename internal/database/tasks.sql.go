// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, user_id, title, notes, frequency, next_due_date, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, title, notes, frequency, next_due_date, created_at, updated_at
`

type CreateTaskParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Notes       sql.NullString
	Frequency   string
	NextDueDate time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Notes,
		arg.Frequency,
		arg.NextDueDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Notes,
		&i.Frequency,
		&i.NextDueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, user_id, title, notes, frequency, next_due_date, created_at, updated_at from tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Notes,
			&i.Frequency,
			&i.NextDueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
